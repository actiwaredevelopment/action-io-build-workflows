name: Publish to docker hub

on:
    workflow_call:
        inputs:
            # use-tar:
            #     description: 'Indication if there is a TAR file in the artifact'
            #     required: false
            #     type: boolean
            #     default: false
            artifact: # id of input
                description: 'The name of the artifact'
                required: true
                type: string
                default: ''
            image-name:
                description: 'The name of the docker image'
                required: true
                type: string
                default: ''
            image-tag:
                description: 'The name of the tag for the docker image'
                required: true
                type: string
                default: ''
            platforms:
                description: "List of target platforms for build"
                required: false
                type: string
            remove-tags:
                description: 'The name of the tag that should be removed'
                required: false
                type: string
            dockerfile:
                description: 'The name of the tag that should be removed'
                required: false
                type: string
                default: 'dockerfile'
            force-remove:
                description: 'The name of the tag that should be removed'
                required: false
                type: boolean
                default: false
            use-cache:
                description: 'Indication whether the cache should be used instead of artifacts'
                required: false
                type: boolean
                default: false
            cache-path:
                description: 'Indication whether the cache should be used instead of artifacts'
                required: false
                type: string
                default: ${{ github.workspace }}

        secrets:
            docker-username:
                required: true
            docker-password:
                required: true

jobs:
    docker:
        name: publish to docker hub
        runs-on: ubuntu-latest

        steps:
            - name: 'Download Artifact'
              if: inputs.use-cache == false
              uses: actions/download-artifact@v4
              with:
                  name: ${{ inputs.artifact }}

            - name: 'Use cache'
              if: inputs.use-cache == true
              uses: actions/cache/restore@v4
              with:
                  key: ${{ inputs.artifact }}
                  restore-keys: ${{ inputs.artifact }}
                  path: |
                      ${{ inputs.cache-path }}
                  fail-on-cache-miss: true
                  enableCrossOsArchive: true

            # - name: Unpack Artifact
            #   if: ${{ inputs.use-tar }}
            #   run: tar -xf ${{ inputs.artifact }}.tar

            - name: Display structure of downloaded files
              run: ls -1Rp

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.docker-username }}
                  password: ${{ secrets.docker-password }}

            - name: 'Build and Publish to Docker Hub'
              uses: docker/build-push-action@v6
              with:
                  context: .
                  tags: ${{ inputs.image-name }}:${{ inputs.image-tag }}
                  file: ${{ inputs.dockerfile }}
                  platforms: ${{ inputs.platforms }}
                  push: true

            - name: Delete old Docker tag from Docker Hub
              if: ${{ inputs.remove-tags != '' && inputs.force-remove == true }}
              env:
                IMAGE: ${{ inputs.image-name }}
                TAG: ${{ inputs.remove-tags }}
                USERNAME: ${{ secrets.docker-username }}
                PASSWORD: ${{ secrets.docker-password }}
              run: |
                echo "Authenticating with Docker Hub..."
                TOKEN=$(curl -s -H "Content-Type: application/json" \
                  -X POST -d "{\"username\": \"$USERNAME\", \"password\": \"$PASSWORD\"}" \
                  https://hub.docker.com/v2/users/login/ | jq -r .token)

                echo "Deleting tag $TAG from image $IMAGE..."
                STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
                  -X DELETE \
                  -H "Authorization: JWT $TOKEN" \
                  https://hub.docker.com/v2/repositories/${IMAGE}/tags/${TAG}/)

                if [ "$STATUS" = "204" ]; then
                  echo "✅ Tag $TAG erfolgreich gelöscht."
                elif [ "$STATUS" = "404" ]; then
                  echo "⚠️ Tag $TAG existiert nicht."
                else
                  echo "❌ Fehler beim Löschen von $TAG (Status: $STATUS)"
                  exit 1
                fi
